/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface FepocDropDownComponent {
        "displayprops": string[];
        "options": any[];
        "placeholder"?: string;
    }
    interface FepocModal {
        "content": string;
        "header": string;
        "open": string;
        "primarybutton": string;
        "secondarybutton": string;
    }
    interface FepocTooltip {
        "HoverText": string;
        "displayText": string;
        "hoverLength": number;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface FepocDropDownComponentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFepocDropDownComponentElement;
}
export interface FepocModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLFepocModalElement;
}
declare global {
    interface HTMLFepocDropDownComponentElementEventMap {
        "selectedOptionEvent": any;
    }
    interface HTMLFepocDropDownComponentElement extends Components.FepocDropDownComponent, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFepocDropDownComponentElementEventMap>(type: K, listener: (this: HTMLFepocDropDownComponentElement, ev: FepocDropDownComponentCustomEvent<HTMLFepocDropDownComponentElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFepocDropDownComponentElementEventMap>(type: K, listener: (this: HTMLFepocDropDownComponentElement, ev: FepocDropDownComponentCustomEvent<HTMLFepocDropDownComponentElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFepocDropDownComponentElement: {
        prototype: HTMLFepocDropDownComponentElement;
        new (): HTMLFepocDropDownComponentElement;
    };
    interface HTMLFepocModalElementEventMap {
        "closeType": string;
    }
    interface HTMLFepocModalElement extends Components.FepocModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLFepocModalElementEventMap>(type: K, listener: (this: HTMLFepocModalElement, ev: FepocModalCustomEvent<HTMLFepocModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLFepocModalElementEventMap>(type: K, listener: (this: HTMLFepocModalElement, ev: FepocModalCustomEvent<HTMLFepocModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLFepocModalElement: {
        prototype: HTMLFepocModalElement;
        new (): HTMLFepocModalElement;
    };
    interface HTMLFepocTooltipElement extends Components.FepocTooltip, HTMLStencilElement {
    }
    var HTMLFepocTooltipElement: {
        prototype: HTMLFepocTooltipElement;
        new (): HTMLFepocTooltipElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "fepoc-drop-down-component": HTMLFepocDropDownComponentElement;
        "fepoc-modal": HTMLFepocModalElement;
        "fepoc-tooltip": HTMLFepocTooltipElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface FepocDropDownComponent {
        "displayprops"?: string[];
        "onSelectedOptionEvent"?: (event: FepocDropDownComponentCustomEvent<any>) => void;
        "options"?: any[];
        "placeholder"?: string;
    }
    interface FepocModal {
        "content"?: string;
        "header"?: string;
        "onCloseType"?: (event: FepocModalCustomEvent<string>) => void;
        "open"?: string;
        "primarybutton"?: string;
        "secondarybutton"?: string;
    }
    interface FepocTooltip {
        "HoverText"?: string;
        "displayText"?: string;
        "hoverLength"?: number;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "fepoc-drop-down-component": FepocDropDownComponent;
        "fepoc-modal": FepocModal;
        "fepoc-tooltip": FepocTooltip;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "fepoc-drop-down-component": LocalJSX.FepocDropDownComponent & JSXBase.HTMLAttributes<HTMLFepocDropDownComponentElement>;
            "fepoc-modal": LocalJSX.FepocModal & JSXBase.HTMLAttributes<HTMLFepocModalElement>;
            "fepoc-tooltip": LocalJSX.FepocTooltip & JSXBase.HTMLAttributes<HTMLFepocTooltipElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
